{"version":3,"sources":["context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layouts/Header.js","components/pages/About.js","components/pages/NotFound.js","components/layouts/TextInputGroup.js","components/contacts/AddContact.js","components/contacts/EditContact.js","components/pages/Test.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","map","Provider","dispatch","setState","axios","get","res","this","data","value","props","children","Component","Consumer","Contact","showContactInfo","onExpand","e","onDelete","a","delete","name","email","phone","className","onClick","style","cursor","classnames","float","color","bind","to","marginRight","Contacts","Fragment","key","Header","branding","href","defaultProps","About","NotFound","TextInputGroup","label","placeholder","onChange","errors","htmlFor","AddContact","onSubmit","preventDefault","newContact","post","history","push","target","EditContact","updateContact","match","params","put","Test","title","body","fetch","then","response","json","App","basename","process","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.72cd1e15.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Context = React.createContext();\r\n\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'DELETE_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.filter(contact => contact.id !== action.payload)\r\n            };\r\n        case 'ADD_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: [action.payload, ...state.contacts]\r\n            };\r\n        case 'UPDATE_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.map(contact => contact.id === action.payload.id ? (contact = action.payload) : contact)\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport class Provider extends Component {\r\n    state = {\r\n        contacts: [],\r\n        dispatch: action => this.setState(state => reducer(state, action))\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const res = await axios\r\n            .get('https://jsonplaceholder.typicode.com/users');\r\n\r\n        this.setState({ contacts: res.data });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Context.Provider value={this.state}>\r\n                {this.props.children}\r\n            </Context.Provider>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport const Consumer = Context.Consumer;\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { Consumer } from '../../context';\r\nimport classnames from 'classnames';\r\nimport axios from 'axios';\r\n\r\n\r\nclass Contact extends Component {\r\n    state = {\r\n        showContactInfo: false\r\n    };\r\n\r\n    onExpand = e => {\r\n        this.setState({ showContactInfo: !this.state.showContactInfo })\r\n    };\r\n\r\n    onDelete = async (id, dispatch) => {\r\n        dispatch({ type: 'DELETE_CONTACT', payload: id });\r\n        await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n\r\n    };\r\n\r\n    render() {\r\n        const { contact: { id, name, email, phone } } = this.props;\r\n        const { showContactInfo } = this.state;\r\n\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value;\r\n                    return (\r\n                        <div className=\"card card-body mb-3\">\r\n                            <h4>\r\n                                <span onClick={this.onExpand} style={{ cursor: 'pointer' }}>\r\n                                    {name}\r\n                                    <i className={classnames(\"material-icons closed\", { 'turn': this.state.showContactInfo })}>arrow_drop_down</i>\r\n                                </span>\r\n                                <i className=\"material-icons mt-1\" style={{ float: 'right', cursor: 'pointer', color: '#db0011' }}\r\n                                    onClick={this.onDelete.bind(this, id, dispatch)}>\r\n                                    cancel\r\n                                </i>\r\n                                <Link to={`contact/edit/${id}`}>\r\n                                    <i\r\n                                        className=\"material-icons\"\r\n                                        style={{\r\n                                            cursor: 'pointer',\r\n                                            float: 'right',\r\n                                            color: '#666',\r\n                                            marginRight: '1rem'\r\n                                        }}>edit</i>\r\n                                </Link>\r\n                            </h4>\r\n                            {\r\n                                showContactInfo ? (\r\n                                    <ul className=\"list-group\">\r\n                                        <li className=\"list-group-item\">Email: {email}</li>\r\n                                        <li className=\"list-group-item\">Phone: {phone}</li>\r\n                                    </ul>) : null\r\n                            }\r\n\r\n                        </div>\r\n                    )\r\n                }\r\n                }\r\n            </Consumer >\r\n        )\r\n    }\r\n}\r\n\r\nContact.propTypes = {\r\n    contact: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default Contact;\r\n","import React, { Component } from 'react'\r\nimport Contact from './Contact'\r\nimport { Consumer } from '../../context'\r\n\r\nclass Contacts extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { contacts } = value;\r\n                    return (\r\n                        <React.Fragment>\r\n                            <h1 className=\"dipsplay-4 mb-3\"><span className='text-danger'>Contact</span> List</h1>\r\n                            {contacts.map(contact => (\r\n                                <Contact\r\n                                    key={contact.id}\r\n                                    contact={contact}\r\n                                />\r\n                            ))}\r\n                        </React.Fragment>\r\n                    );\r\n                }}\r\n            </Consumer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Contacts;\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Header = (props) => {\r\n    const { branding } = props\r\n    return (\r\n        <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\">\r\n            <div className=\"container\">\r\n                <a href=\"/\" className=\"navbar-brand\">{branding}</a>\r\n                <div>\r\n                    <ul className=\"navbar-nav mr-auto\">\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/\" className=\"nav-link\"><i className='material-icons'>group</i> Contacts</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/contact/add\" className=\"nav-link\"><i className='material-icons'>person_add</i>Add</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/about\" className=\"nav-link\"><i className='material-icons'>help</i> About</Link>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\n\r\nHeader.defaultProps = {\r\n    branding: 'My App'\r\n};\r\n\r\nHeader.propTypes = {\r\n    branding: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Header;","import React from 'react'\r\n\r\nexport default function About(props) {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4\">About Contact Manager</h1>\r\n            <p className=\"lead\">Simple app to manage contacts.</p>\r\n            <p className=\"text-secondary\">Version 1.0.0</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4\"><span className='text-danger'>404</span> Page Not Found</h1>\r\n            <p className=\"lead\">Sorry, that page does not exist</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classnames from 'classnames';\r\n\r\nconst TextInputGroup = ({\r\n    label,\r\n    name,\r\n    value,\r\n    placeholder,\r\n    type,\r\n    onChange,\r\n    errors\r\n}) => {\r\n    return (\r\n        <div className=\"form-group\">\r\n            <label htmlFor=\"name\">{label}</label>\r\n            <input\r\n                type={type}\r\n                className={classnames('form-control form-control-lg', { 'is-invalid': errors })}\r\n                placeholder={placeholder}\r\n                name={name}\r\n                value={value}\r\n                onChange={onChange}\r\n            />\r\n            {errors && <div className=\"invalid-feedback\">{errors}</div>}\r\n        </div>\r\n    )\r\n};\r\n\r\nTextInputGroup.propTypes = {\r\n    label: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    errors: PropTypes.string\r\n}\r\n\r\nTextInputGroup.defaultProps = {\r\n    type: 'text'\r\n}\r\n\r\nexport default TextInputGroup;\r\n","import React, { Component } from 'react';\r\nimport { Consumer } from '../../context';\r\nimport TextInputGroup from '../layouts/TextInputGroup';\r\n//import { v4 as uuid } from 'uuid';\r\nimport axios from 'axios';\r\n\r\nclass AddContact extends Component {\r\n    state = {\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        errors: {}\r\n    };\r\n\r\n    onSubmit = async (dispatch, e) => {\r\n        e.preventDefault();\r\n\r\n        const { name, email, phone } = this.state;\r\n\r\n        // check for submission errors\r\n        if (name === '') {\r\n            this.setState({ errors: { name: 'Name is required' } })\r\n            return;\r\n        }\r\n        if (email === '') {\r\n            this.setState({ errors: { email: 'Email is required' } })\r\n            return;\r\n        }\r\n        if (phone === '') {\r\n            this.setState({ errors: { phone: 'Phone number is required' } })\r\n            return;\r\n        }\r\n\r\n        const newContact = {\r\n            name,\r\n            email,\r\n            phone\r\n        };\r\n\r\n\r\n        const res = await axios.post('https://jsonplaceholder.typicode.com/users', newContact);\r\n\r\n        dispatch({ type: 'ADD_CONTACT', payload: res.data })\r\n\r\n        // clear form after submission\r\n        this.setState({\r\n            name: '',\r\n            email: '',\r\n            phone: '',\r\n            errors: {}\r\n        });\r\n\r\n        this.props.history.push('/');\r\n    };\r\n    onChange = e => this.setState({ [e.target.name]: e.target.value })\r\n\r\n    render() {\r\n        const { name, email, phone, errors } = this.state;\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value;\r\n                    return (\r\n                        <div className='card mb-3'>\r\n                            <div className=\"card-header\">Add Contact</div>\r\n                            <div className=\"card-body\">\r\n                                {/* <form onSubmit={e => this.onSubmit(dispatch, e)}> */}\r\n                                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                                    <TextInputGroup\r\n                                        name='name'\r\n                                        label='Name'\r\n                                        placeholder='Enter name'\r\n                                        value={name}\r\n                                        onChange={this.onChange}\r\n                                        errors={errors.name}\r\n                                    />\r\n                                    <TextInputGroup\r\n                                        name='email'\r\n                                        label='Email'\r\n                                        placeholder='Enter email'\r\n                                        value={email}\r\n                                        type='email'\r\n                                        onChange={this.onChange}\r\n                                        errors={errors.email}\r\n                                    />\r\n                                    <TextInputGroup\r\n                                        name='phone'\r\n                                        label='Phone'\r\n                                        placeholder='Enter phone'\r\n                                        value={phone}\r\n                                        onChange={this.onChange}\r\n                                        errors={errors.phone}\r\n                                    />\r\n                                    <input type='submit' value='Add Contact' className='btn btn-block btn-light' />\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddContact;","import React, { Component } from 'react';\r\nimport { Consumer } from '../../context';\r\nimport TextInputGroup from '../layouts/TextInputGroup';\r\n//import { v4 as uuid } from 'uuid';\r\nimport axios from 'axios';\r\n\r\nclass EditContact extends Component {\r\n    state = {\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        errors: {}\r\n    };\r\n\r\n    async componentDidMount() {\r\n        const { id } = this.props.match.params;\r\n\r\n        const res = await axios.get(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n\r\n        const contact = res.data;\r\n\r\n        this.setState({\r\n            name: contact.name,\r\n            email: contact.email,\r\n            phone: contact.phone\r\n        });\r\n    }\r\n\r\n    onSubmit = async (dispatch, e) => {\r\n        e.preventDefault();\r\n\r\n        const { name, email, phone } = this.state;\r\n\r\n        // check for submission errors\r\n        if (name === '') {\r\n            this.setState({ errors: { name: 'Name is required' } })\r\n            return;\r\n        }\r\n        if (email === '') {\r\n            this.setState({ errors: { email: 'Email is required' } })\r\n            return;\r\n        }\r\n        if (phone === '') {\r\n            this.setState({ errors: { phone: 'Phone number is required' } })\r\n            return;\r\n        }\r\n\r\n        const updateContact = {\r\n            name,\r\n            email,\r\n            phone\r\n        };\r\n\r\n        const { id } = this.props.match.params;\r\n\r\n        const res = await axios.put(`https://jsonplaceholder.typicode.com/users/${id}`, updateContact);\r\n\r\n        dispatch({ type: 'UPDATE_CONTACT', payload: res.data });\r\n\r\n        // clear form after submission\r\n        this.setState({\r\n            name: '',\r\n            email: '',\r\n            phone: '',\r\n            errors: {}\r\n        });\r\n\r\n        this.props.history.push('/');\r\n    };\r\n    onChange = e => this.setState({ [e.target.name]: e.target.value })\r\n\r\n    render() {\r\n        const { name, email, phone, errors } = this.state;\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value;\r\n                    return (\r\n                        <div className='card mb-3'>\r\n                            <div className=\"card-header\">Edit Contact</div>\r\n                            <div className=\"card-body\">\r\n                                {/* <form onSubmit={e => this.onSubmit(dispatch, e)}> */}\r\n                                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                                    <TextInputGroup\r\n                                        name='name'\r\n                                        label='Name'\r\n                                        placeholder='Enter name'\r\n                                        value={name}\r\n                                        onChange={this.onChange}\r\n                                        errors={errors.name}\r\n                                    />\r\n                                    <TextInputGroup\r\n                                        name='email'\r\n                                        label='Email'\r\n                                        placeholder='Enter email'\r\n                                        value={email}\r\n                                        type='email'\r\n                                        onChange={this.onChange}\r\n                                        errors={errors.email}\r\n                                    />\r\n                                    <TextInputGroup\r\n                                        name='phone'\r\n                                        label='Phone'\r\n                                        placeholder='Enter phone'\r\n                                        value={phone}\r\n                                        onChange={this.onChange}\r\n                                        errors={errors.phone}\r\n                                    />\r\n                                    <input type='submit' value='Update Contact' className='btn btn-block btn-light' />\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EditContact;","import React, { Component } from 'react'\r\n\r\nexport default class Test extends Component {\r\n    state = {\r\n        title: '',\r\n        body: ''\r\n    };\r\n\r\n    componentDidMount() {\r\n        fetch\r\n            ('https://jsonplaceholder.typicode.com/posts/1')\r\n            .then(response => response.json())\r\n            .then(data => this.setState({\r\n                title: data.title,\r\n                body: data.body\r\n            }));\r\n    }\r\n\r\n    render() {\r\n        const { title, body } = this.state;\r\n        return (\r\n            <div>\r\n                <h1>{title}</h1>\r\n                <p>{body}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Contacts from './components/contacts/Contacts';\nimport Header from './components/layouts/Header';\nimport About from './components/pages/About';\nimport NotFound from './components/pages/NotFound';\nimport AddContact from './components/contacts/AddContact';\nimport EditContact from './components/contacts/EditContact';\nimport Test from './components/pages/Test'\n\nimport { Provider } from './context';\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css';\n//import { render } from '@testing-library/react';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Provider>\n        <Router basename={process.env.PUBLIC_URL}>\n          <div className=\"App\">\n            <Header branding=\"Contact Manager\" />\n            <div className=\"container\">\n              <Switch>\n                <Route exact path='/' component={Contacts} />\n                <Route exact path='/contact/add' component={AddContact} />\n                <Route exact path='/about' component={About} />\n                <Route exact path='/contact/edit/:id' component={EditContact} />\n                <Route exact path='/test' component={Test} />\n                <Route component={NotFound} />\n              </Switch>\n            </div>\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}